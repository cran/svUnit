#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
% \VignetteIndexEntry{svUnit - A framework for unit testing in R}
%\VignettePackage{svUnit}
\end_preamble
\use_default_options false
\begin_modules
svSweave
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8x
\fontencoding global
\font_roman palatino
\font_sans lmss
\font_typewriter lmtt
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "svUnit - A framework for unit testing in R"
\pdf_author "Philippe Grosjean"
\pdf_subject "Test units using the svUnit R package"
\pdf_keywords "test unit, extreme programming, code refactoring, quality insurance"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 0
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_authoryear
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 4.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
svUnit - A framework for unit testing in R 
\end_layout

\begin_layout Date
Version 0.7-3, 2010-09-05
\end_layout

\begin_layout Author
Philippe Grosjean (phgrosjean@sciviews.org)
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Unit testing (see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://en.wikipedia.org/wiki/Unit_test
\end_layout

\end_inset

) is an approach successfully used to develop software, and to ease code
 refactoring for keeping bugs to the minimum.
 It is also the insurance that the software is doing the right calculation
 (quality insurance).
 Basically, a test just checks if the code is running and is producing the
 correct answer/behavior in a given situation.
 As such, unit tests are build in 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 package production because all examples in documentation files, and perhaps,
 test code in 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
/tests
\end_layout

\end_inset

 subdirectory are run during the checking of a package (
\begin_inset Flex CharStyle:Command
status collapsed

\begin_layout Plain Layout
R CMD check <pkg>
\end_layout

\end_inset

).
 However, the 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 approach lacks a certain number of features to allow optimal use of unit
 tests as in extreme programming (test first â€“ code second): 
\end_layout

\begin_layout Itemize
Tests are related to package compilation and cannot easily be run independently
 (for instance, for functions developed separately).
\end_layout

\begin_layout Itemize
Once a test fails, the checking process is interrupted.
 Thus one has to correct the bug and launch package checking again...
 and perhaps get caught by the next bug.
 It is a long and painful process.
\end_layout

\begin_layout Itemize
There is no way to choose one or several tests selectively: all are run
 or not (depending on command line options) during package checking.
\end_layout

\begin_layout Itemize
It is very hard, or near to impossible to program in 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 in a test driven development (
\emph on
write tests first
\emph default
) with the standard tools (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://en.wikipedia.org/wiki/Test- driven_development
\end_layout

\end_inset

).
 
\end_layout

\begin_layout Itemize
Consequently, the 
\begin_inset Quotes els
\end_inset


\emph on
test-code-simplify
\emph default

\begin_inset Quotes ers
\end_inset

 cycle is not easily accessible yet to 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 programmer, because of the lack of an interactive and flexible testing
 mechanism providing immediate, or quasi immediate feedback about changes
 made.
\end_layout

\begin_layout Itemize
We would like also to emphasize that test suites are not only useful to
 check code, they can also be used to check data, or the pertinence of analyses.
\end_layout

\begin_layout Subsection
Unit testing in R without svUnit
\end_layout

\begin_layout Standard
Besides the "regular" testing mechanism of 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 packages, one can find the 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

 package on CRAN (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://cran.r-project.org
\end_layout

\end_inset

).
 Another package used to provide an alternate implementation of test unit:
 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
butler
\end_layout

\end_inset

, but it is not maintained any more and has given up in favor of 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

.
 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

 implements the following features: 
\end_layout

\begin_layout Itemize

\series bold
Assertions,
\series default
 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkEquals()
\end_layout

\end_inset

, 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkEqualsNumeric()
\end_layout

\end_inset

, 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkIdentical()
\end_layout

\end_inset

 and 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkTrue()
\end_layout

\end_inset

 and negative tests (tests that check error conditions, 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkException()
\end_layout

\end_inset

).
\end_layout

\begin_layout Itemize
Assertions are grouped into 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 functions to form one 
\series bold
test function
\series default
 that runs a series of related individual tests.
 It is easy to temporarily inactivate one or more tests by commenting lines
 in the function.
 To avoid forgetting tests that are commented out later on, there is special
 function, named 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
DEACTIVATED()
\end_layout

\end_inset

 that tags the test with a reminder for your deactivated items (i.e., the
 reminder is written in the test log).
\end_layout

\begin_layout Itemize
A series of test functions (whose name typically start with 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
test....
\end_layout

\end_inset

) are collected together in a source-able 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 code file (name starting with 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
runit....
\end_layout

\end_inset

) on disk.
 This file is called a 
\series bold
test unit
\series default
.
\end_layout

\begin_layout Itemize
A 
\series bold
test suite
\series default
 (object 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
RUnitTestSuite
\end_layout

\end_inset

) is a special object defining a battery of tests It points to one or several
 directories containing test units.
 A test suite is defined by 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
defineTestSuite()
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
One or more test suites can be run by calling 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
runTestSuite()
\end_layout

\end_inset

.
 There is a shortcut to define and run a test suite constituted by only
 one test unit by using the function 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
runTestFile()
\end_layout

\end_inset

.
 Once the test is run, a 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
RUnitTestData
\end_layout

\end_inset

 object is created that contains all the information collected from the
 various tests run.
\end_layout

\begin_layout Itemize
One can print a synthetic report (how many test units, test functions, number
 of errors, fails and deactivated item), or get a more extensive 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
summary()
\end_layout

\end_inset

 of the tests with indication about which ones failed or produced errors.
 The function 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
printTextProtocol()
\end_layout

\end_inset

 does the same, while 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
printHTMLProtocol()
\end_layout

\end_inset

 produces a report in HTML format.
\end_layout

\begin_layout Itemize
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

 contains also functions to determine which code is run in the original
 function when tested, in order to detect the parts of the code not covered
 by the test suite (code coverage function 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
inspect()
\end_layout

\end_inset

 and function 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
tracker()
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
As complete and nice as 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

 is, there is no tools to integrate the test suite in a given development
 environment (IDE) or graphical user interface (GUI), as far as we know.
 In particular, there is no real-time reporting mechanism used to easy the
 
\emph on
test-code-simplify
\emph default
 cycle.
 The way tests are implemented and run is left to the user, but the implementati
on suggests that the authors of 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

 mainly target batch execution of the tests (for instance, nightly check
 of code in a server), rather that real-time interaction with the tests.
\end_layout

\begin_layout Standard
There is also no integration with the "regular" 
\begin_inset Flex CharStyle:Command
status collapsed

\begin_layout Plain Layout
R CMD check
\end_layout

\end_inset

 mechanism of 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 in 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

.
 There is an embryo of organization of these tests units to make them compatible
 with 
\begin_inset Flex CharStyle:Command
status collapsed

\begin_layout Plain Layout
R CMD check
\end_layout

\end_inset

 on the R Wiki (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://wiki.r-project.org/rwiki/doku.php?id=developers:runit
\end_layout

\end_inset

).
 This approach works well only on Linux/Unix systems, but needs to be adapted
 for Windows.
 
\end_layout

\begin_layout Subsection
Unit testing framework for R with svUnit
\end_layout

\begin_layout Standard
Our initial goal was to implement a GUI layer on top of 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

, and to integrate test units as smoothly as possible in a code editor,
 as well as, making tests easily accessible and fully compatible with 
\begin_inset Flex CharStyle:Command
status collapsed

\begin_layout Plain Layout
R CMD check
\end_layout

\end_inset

 on all platforms supported by 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

.
 Ultimately, the test suite should be easy to create, to use interactively,
 and should be able to test functions in a complex set of 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 packages.
\end_layout

\begin_layout Standard
However, we encountered several difficulties while trying to enhance 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

 mechanism.
 When we started to work on this project, 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

 (version 0.4-17) did not allow to subclass its objects.
 Moreover, its 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
RUnitTestData
\end_layout

\end_inset

 object is optimized for quick testing, but not at all for easy reviewing
 of its content: it is a list of lists of lists,...
 requiring embedded for loop and 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
lapply()
\end_layout

\end_inset

 / 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
sapply()
\end_layout

\end_inset

 procedures to extract some content.
 Finally, the concept of test units as source-able files on disk is a nice
 idea, but it is too rigid for quick writing test cases for objects not
 associated (yet) with an 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 packages.
\end_layout

\begin_layout Standard
We did a first implementation of the 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

 GUI based on these objects, before realizing that it is really not designed
 for such an use.
 So, we decide to write a completely different unit testing framework in
 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 : 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

, but we make it test code compatible with 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

 (i.e., the engine and objects used are totally different, but the test code
 run in 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

 or 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 is interchangeable).
\end_layout

\begin_layout Standard
Finally, 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 is also designed to be integrated in the 
\begin_inset Flex SciViews
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 GUI (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.sciviews.org/SciViews-K
\end_layout

\end_inset

), on top of Komodo Edit or IDE (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.activestate.com/komodo_edit
\end_layout

\end_inset

), and to approach extreme programming practices with automatic code testing
 while you write it.
 A rather simple interface is provided to link and pilot 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 from any GUI/IDE, and the Komodo Edit/IDE implementation could be used
 as an example to program similar integration panels for other 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 GUIs.
 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 also formats its report with 
\emph on
creole wiki
\emph default
 syntax.
 It is directly readable, but it can also be displayed in a much nicer way
 using any wiki engine compatible with the creole wiki language.
 It is thus rather easy to write test reports in wiki servers, possibly
 through nightly automatic process for your code, if you like.
\end_layout

\begin_layout Standard
This vignette is a guided tour of 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

, showing its features and the various ways you can use it to test your
 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 code.
\end_layout

\begin_layout Section
Installation
\end_layout

\begin_layout Standard
The 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 package is available on CRAN (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://cran.r-project.org
\end_layout

\end_inset

), and its latest development version is also available on R-Forge (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sciviews.r-forge.r-project.org/
\end_layout

\end_inset

).
 You can install it with
\begin_inset Foot
status open

\begin_layout Plain Layout
Install the development version with 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
install.packages("svUnit", repos = "http://r-forge.r-project.org")
\end_layout

\end_inset

.
\end_layout

\end_inset

:
\end_layout

\begin_layout R-Opts
keep.source = TRUE
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<echo = FALSE, results = hide>>=
\end_layout

\begin_layout Plain Layout

options(useFancyQuotes = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<eval = FALSE>>=
\end_layout

\begin_layout Plain Layout

install.packages("svUnit")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This package has no dependence other than 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\begin_inset Formula $\geq$
\end_inset

 1.9.0.
 However, if you would like to use its interactive mode in a GUI editor,
 you must also install Komodo Edit or Komodo IDE and 
\begin_inset Flex SciViews
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

-K.
 The procedure is explained here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.sciviews.org/SciViews-K
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Once the 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 package is installed, you can check it is working correctly on your machine
 with the following example code:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

library(svUnit)
\end_layout

\begin_layout Plain Layout

Square <- function (x) return(x^2)
\end_layout

\begin_layout Plain Layout

test(Square) <- function () {
\end_layout

\begin_layout Plain Layout

	checkEqualsNumeric(9, Square(3))
\end_layout

\begin_layout Plain Layout

	checkEqualsNumeric(10, Square(3))   # This intentionally fails
\end_layout

\begin_layout Plain Layout

	checkEqualsNumeric(9, SSSquare(3))  # This raises error
\end_layout

\begin_layout Plain Layout

	checkEqualsNumeric(c(1, 4, 9), Square(1:3))
\end_layout

\begin_layout Plain Layout

	checkException(Square("xx"))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

clearLog()
\end_layout

\begin_layout Plain Layout

(runTest(Square))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Framed
position "t"
hor_pos "c"
has_inner_box 0
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Although test unit code is compatible with both 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 and 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

, do not load both packages in 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 memory at the same time, or you will badly mix incompatible code!
\end_layout

\end_inset


\end_layout

\begin_layout Section
Overview of svUnit
\end_layout

\begin_layout Standard
You ensure that code you write in your 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 functions does the expected work by defining a battery of tests that will
 compare the output of your code with reference values.
 In 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

, the simplest way to define such a battery of tests is by attaching it
 to functions loaded in 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 memory
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
In fact, you can attach 
\begin_inset Flex Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 tests to any kind of 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 object, not only function.
 This could be useful to test S3/S4 objects, or even, datasets.
 
\end_layout

\end_inset

.
 Of course, you can also define batteries of tests that are independent
 of any 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 object, or that check several of them together (so called, 
\emph on
integration tests
\emph default
).
 Here is a couple of examples:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

library(svUnit)
\end_layout

\begin_layout Plain Layout

## Create two R functions that include their own test cases
\end_layout

\begin_layout Plain Layout

Square <- function (x) return(x^2)
\end_layout

\begin_layout Plain Layout

test(Square) <- function () {
\end_layout

\begin_layout Plain Layout

	checkEqualsNumeric(9, Square(3))
\end_layout

\begin_layout Plain Layout

	checkEqualsNumeric(c(4, 9), Square(2:3))
\end_layout

\begin_layout Plain Layout

	checkException(Square("xx"))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Cube <- function (x) return(x^3)
\end_layout

\begin_layout Plain Layout

test(Cube) <- function () {
\end_layout

\begin_layout Plain Layout

	checkEqualsNumeric(27, Cube(3))
\end_layout

\begin_layout Plain Layout

	checkEqualsNumeric(c(8, 28), Cube(2:3))
\end_layout

\begin_layout Plain Layout

	checkException(Cube("xx"))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## Add a separate test case
\end_layout

\begin_layout Plain Layout

test_Integrate <- svTest(function () {
\end_layout

\begin_layout Plain Layout

	checkTrue(1 < 2, "check1")
\end_layout

\begin_layout Plain Layout

	v <- c(1, 2, 3)  # The reference
\end_layout

\begin_layout Plain Layout

	w <- 1:3         # The value to compare to the reference
\end_layout

\begin_layout Plain Layout

	checkEquals(v, w)
\end_layout

\begin_layout Plain Layout

})
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When you run a test in 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

, it logs its results in a centralized logger.
 The idea is to get a central repository for tests that you can manipulate
 as you like (print, summarize, convert, search, display in a GUI, etc.).
 If you want to start new tests, you should first clean this logger by 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
clearLog()
\end_layout

\end_inset

.
 At any time, the logger is accessible by 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
Log()
\end_layout

\end_inset

, and a summary of its content is displayed using 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
summary(Log()
\end_layout

\end_inset

).
 So, to run test for your 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
Square()
\end_layout

\end_inset

 function as well as your 
\begin_inset Flex CharStyle:Var
status collapsed

\begin_layout Plain Layout
test_Integrate
\end_layout

\end_inset

 integration test, you simply do the following:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

clearLog()
\end_layout

\begin_layout Plain Layout

runTest(Square)
\end_layout

\begin_layout Plain Layout

runTest(test_Integrate)
\end_layout

\begin_layout Plain Layout

Log()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this report, you see that all your tests succeed.
 Note that 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 is making the distinction between a test that 
\series bold
fails
\series default
 (the code is run correctly, but the result is different from what was expected)
 and code that raises 
\series bold
error
\series default
 (it was not possible to run the test because its code is incorrect, or
 for some other reasons).
 Note also that the function 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkException()
\end_layout

\end_inset

 is designed to explicitly test code that should 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
stop()
\end_layout

\end_inset

 in 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
checkException()
\end_layout

\end_inset

 can also track 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
warning()
\end_layout

\end_inset

 messages with this little trick: first convert all warnings into errors
 with 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
owarn <- options(warn = 2)$warn
\end_layout

\end_inset

, run the code that should generate a warning inside 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
checkException()
\end_layout

\end_inset

, and then restore default warning behavior with 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
options(warn = owarn)
\end_layout

\end_inset

.
\end_layout

\end_inset

.
 So, if that test does not raises an exception, it is considered to have
 failed.
 This is useful to check that your functions correctly trap wrong arguments,
 for instance, like in 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkException(Square("xx"))
\end_layout

\end_inset

 here above (a character string is provided where a numerical value is expected).
\end_layout

\begin_layout Standard
Now, let's look what happens if we test the 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
Cube()
\end_layout

\end_inset

 function without clearing the logger:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

runTest(Cube)
\end_layout

\begin_layout Plain Layout

Log()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We note this:
\end_layout

\begin_layout Enumerate
When a test succeeds, nothing is printed by default (result is returned
 invisibly).
 But when a test fails, or raises errors, the guilty test(s) results are
 printed.
 We expected 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
c(8, 28)
\end_layout

\end_inset

 (made intentionally wrong for the sake of the demonstration) from 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
Cube(2:3)
\end_layout

\end_inset

 in 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkEqualsNumeric(c(8, 28), Cube(2:3))
\end_layout

\end_inset

, and (of course), we got 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
c(8, 27)
\end_layout

\end_inset

.
 This test shows how 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 presents test failures.
\end_layout

\begin_layout Enumerate
The results of the tests on 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
Cube()
\end_layout

\end_inset

 are added to the previous report.
 So, it is possible to build rather easily reports that summarize tests
 on several objects, by adding test results in the logger sequentially.
 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 does this naturally and transparently.
 Starting a new report is equally simple: just use 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
clearLog()
\end_layout

\end_inset

...
\end_layout

\begin_layout Subsection
Assertions in svUnit
\end_layout

\begin_layout Standard
The most basic item in a test suite is an 
\series bold
assertion
\series default
 represented by a 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkXXX()
\end_layout

\end_inset

 function in 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

/
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

.
 Five such functions are currently defined:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkEquals(current, target)
\end_layout

\end_inset

 determines if data in 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
target
\end_layout

\end_inset

 is the same as data in 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
current
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkEqualsNumeric(current, target)
\end_layout

\end_inset

 does the same but allows for a better comparison for numbers (variation
 allowed within a tolerance window).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkIdentical(current, target)
\end_layout

\end_inset

 checks whether two 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 objects are strictly identical.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkTrue(expr)
\end_layout

\end_inset

 only succeed if 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
expr
\end_layout

\end_inset

 is 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
TRUE
\end_layout

\end_inset

.
 Note a difference in 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 and 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

 (at least, in its version 0.4-17): the 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

 function is not vectorized and 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
expr
\end_layout

\end_inset

 must return a single atomic logical value.
 The corresponding 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 function also accepts a vector of logical values.
 In this case, all elements of the vector must be 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
TRUE
\end_layout

\end_inset

 for the test to succeed.
 When you make sure that 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
expr
\end_layout

\end_inset

 always returns a single logical value (for instance by using 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
all(expr)
\end_layout

\end_inset

), both functions should be compatible.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkException(expr)
\end_layout

\end_inset

 verifies that a given code raises an exception (in 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

, it means that a line of code with 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
stop()
\end_layout

\end_inset

 is executed).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
DEACTIVATED()
\end_layout

\end_inset

 makes sure that all tests following this instruction (in a test function,
 see next paragraph) are deactivated, and inserts a reminder in the logger
 about the fact that some tests are deactivated in this suite.
\end_layout

\begin_layout Standard
For all these functions, you have an additional optional argument 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
msg =
\end_layout

\end_inset

 where you can provide a (short) message to print in front of each text
 in the report.
 These functions return invisibly: 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
TRUE
\end_layout

\end_inset

 if the test succeeds, or 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
FALSE
\end_layout

\end_inset

 if it fails (code is executed correctly, but does not pass the test), and
 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
NA
\end_layout

\end_inset

 if there was an error (the 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 code of the test was not executed correctly).
 Moreover, these functions record the results, the context of the test and
 the timing in a logger (object 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
svSuiteData
\end_layout

\end_inset

 inheriting from 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
environment
\end_layout

\end_inset

) called 
\begin_inset Flex CharStyle:Var
status collapsed

\begin_layout Plain Layout
.Log
\end_layout

\end_inset

 and located in the userâ€™s workspace.
 So, executing a series of assertions and getting a report is simply done
 as (in its simplest form, you can use the various 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkXXX()
\end_layout

\end_inset

 functions directly at the command line):
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

clearLog()
\end_layout

\begin_layout Plain Layout

checkEqualsNumeric(1, log(exp(1)))
\end_layout

\begin_layout Plain Layout

checkException(log("a"))
\end_layout

\begin_layout Plain Layout

checkTrue(1 == 2)
\end_layout

\begin_layout Plain Layout

Log()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As you can see, the 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkXXX()
\end_layout

\end_inset

 functions work hand in hand with the test logger (the 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
checkXXX()
\end_layout

\end_inset

 functions also return the result of the test invisibly, so, you can also
 assign it to a variable if you like).
 These function are mainly used for their side-effect of adding an entry
 to the logger.
\end_layout

\begin_layout Standard
The last command 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
Log()
\end_layout

\end_inset

 prints the content of the logger.
 You see how a report is printed, with a first part being a short summary
 by categories (assertions run at the command line are placed automatically
 in the 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
eval
\end_layout

\end_inset

 category: there is no better context known for them.
 Usually, those assertions should be placed in test functions, or in test
 units, as we will see later in this manual, and the category will reflect
 this organization).
 A detailed report on the tests that failed or raised an error is also printed
 at the end of the report.
 
\end_layout

\begin_layout Standard
Of course, the same report is much easier to manipulate from within the
 graphical tree in the Komodoâ€™s 
\series bold
R Unit
\series default
 tab, but the simple text report in 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 has the advantage of being independent from any GUI, and from Komodo.
 It can also be generated in batch mode.
 Last, but not least, it uses a general Wiki formatting called creole wiki
 (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.wikicreole.org/wiki/Creole1.0
\end_layout

\end_inset

).
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:wikireport"

\end_inset

 illustrates the way the same report looks like in DokuWiki with the creole
 plugin (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.wikicreole.org/wiki/DokuWiki
\end_layout

\end_inset

) installed.
 Note the convenient table of content that lists here a clickable list of
 all tests run.
 From this point, it is relatively easy to define nightly cron task jobs
 on a server to run a script that executes these tests and update a wiki
 page (look at your particular wiki engine documentation to determine how
 you can access wiki pages on the command line).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout R-Center

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename svUnit_wikiReport.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:wikireport"

\end_inset

a 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 test report as it appears when inserted in a wiki page (DokuWiki engine
 with the creole plugin installed).
 Note the summary of results at the top left of the page, and the clickable
 table of contents with detailed entries to easily navigate to the test
 log you are consulting).
 Timing of the test is also clearly indicated, since it is a complementary
 but important information (if a test succeeds, but calculation is way too
 long, it is good to know it)!
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection
Manipulating the logger data
\end_layout

\begin_layout Standard
The 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 package provides a series of functions to manipulate the logger from the
 command line, in particular, 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
stats()
\end_layout

\end_inset

, 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
summary()
\end_layout

\end_inset

, 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
metadata()
\end_layout

\end_inset

 and 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
ls()
\end_layout

\end_inset

:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

## Clear test exclusion list for running all test suites
\end_layout

\begin_layout Plain Layout

options(svUnit.excludeList = NULL)
\end_layout

\begin_layout Plain Layout

## Clear the logger
\end_layout

\begin_layout Plain Layout

clearLog()
\end_layout

\begin_layout Plain Layout

## Run all currently defined tests
\end_layout

\begin_layout Plain Layout

runTest(svSuiteList(), name = "AllTests")
\end_layout

\begin_layout Plain Layout

## Get some statistics
\end_layout

\begin_layout Plain Layout

stats(Log())[, 1:3]
\end_layout

\begin_layout Plain Layout

## A slightly different presentation than with print
\end_layout

\begin_layout Plain Layout

summary(Log())
\end_layout

\begin_layout Plain Layout

## Metadata collected on the machine where tests are run
\end_layout

\begin_layout Plain Layout

metadata(Log())
\end_layout

\begin_layout Plain Layout

## List content of the log
\end_layout

\begin_layout Plain Layout

ls(Log())
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As you can see, 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
ls()
\end_layout

\end_inset

 lists all components recorded in the test suite.
 Each component is a 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
svTestData
\end_layout

\end_inset

 object inheriting from 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
data.frame
\end_layout

\end_inset

, and it can be easily accessed through the 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
$
\end_layout

\end_inset

 operator.
 There are, of course similar methods defined for those 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
svTestData
\end_layout

\end_inset

 objects, like 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
print()
\end_layout

\end_inset

, 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
summary()
\end_layout

\end_inset

 and 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
stats()
\end_layout

\end_inset

:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

myTest <- Log()$testCube
\end_layout

\begin_layout Plain Layout

class(myTest)
\end_layout

\begin_layout Plain Layout

myTest
\end_layout

\begin_layout Plain Layout

summary(myTest)
\end_layout

\begin_layout Plain Layout

stats(myTest)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As the logger inherits from 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
environment
\end_layout

\end_inset

, you can manage individual test data the same way as objects in any other
 environment.
 For instance, if you want to delete a particular test data without touching
 to the rest, you can use:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

ls(Log())
\end_layout

\begin_layout Plain Layout

rm(test_R, envir = Log())
\end_layout

\begin_layout Plain Layout

ls(Log())
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As we will see in the following section, 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 proposes several means to organize individual assertions in modules: 
\series bold
test functions
\series default
, 
\series bold
test units
\series default
 and 
\series bold
test suites
\series default
.
 This organization is inspired from 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

, but with additional ways of using tests in interactive sessions (for instance,
 the ability to attach a test to the objects to be tested).
\end_layout

\begin_layout Subsection
Test function
\end_layout

\begin_layout Standard
The first organization level for grouping assertions together is the 
\series bold
test function
\series default
.
 A test function is a function without arguments whose name must start with
 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
test
\end_layout

\end_inset

.
 It typically contains a series of assertions applied to one object, method,
 or function to be checked (this is not obligatory, assertions are not restricte
d to one object, but good practices strongly suggest such a restriction).
 Here is an example:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

test_function <- function () {
\end_layout

\begin_layout Plain Layout

	checkTrue(1 < 2, "check1")
\end_layout

\begin_layout Plain Layout

	v <- c(1, 2, 3)  # The reference
\end_layout

\begin_layout Plain Layout

	w <- 1:3         # The object to compare to the reference
\end_layout

\begin_layout Plain Layout

	checkEqualsNumeric(v, w)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

## Turn this function into a test
\end_layout

\begin_layout Plain Layout

test_function <- as.svTest(test_function)
\end_layout

\begin_layout Plain Layout

is.svTest(test_function)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A test function should be made a special object called 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
svTest
\end_layout

\end_inset

, so that 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 can recognize it.
 This 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
svTest
\end_layout

\end_inset

 object, is allowed to live on its own (for instance, in the user's workspace,
 or anywhere you like).
 It can be defined in a 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 script, be saved in a 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
.RData
\end_layout

\end_inset

 file, etc...
 Note that this is very different from 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

 where test must always be located in a unit test file on disk).
 In 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 (not 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

), you run such a test simply by using 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
runTest()
\end_layout

\end_inset

, which returns the results invisibly and add it to the logger:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

clearLog()
\end_layout

\begin_layout Plain Layout

runTest(test_function)
\end_layout

\begin_layout Plain Layout

Log()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now, a test function is most likely designed to test an 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 object.
 The 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 package also provides facilities to attach the test function to the object
 to be tested.
 Hence, the test cases and the tested object conveniently form a single
 entity that one can manipulate, copy, save, reload, etc.
 with all the usual tools in 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

.
 This association is simply made using 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
test(myobj) <-
\end_layout

\end_inset

:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

## A very simple function
\end_layout

\begin_layout Plain Layout

Square <- function (x) return(x^2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## A test case to associate with the Square() function
\end_layout

\begin_layout Plain Layout

test(Square) <- function () {
\end_layout

\begin_layout Plain Layout

	checkEqualsNumeric(9, Square(3))
\end_layout

\begin_layout Plain Layout

	checkEqualsNumeric(c(1, 4, 9), Square(1:3))
\end_layout

\begin_layout Plain Layout

	checkException(Square("xx"))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

is.test(Square)  # Does this object contain tests?
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
One can retrieve the test associated with the object by using:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

test(Square)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And of course, running the test associated with an object is as easy as:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

runTest(Square)
\end_layout

\begin_layout Plain Layout

Log()  # Remember we didn't clear the log!
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now that you master test functions, you will discover how you can group
 them in logical 
\series bold
units
\series default
, and associate them to 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 packages.
\end_layout

\begin_layout Subsection
Test units
\end_layout

\begin_layout Standard
A 
\series bold
unit
\series default
 is a coherent piece of software that can be tested separately from the
 rest.
 Typically, a 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 package is a structured way to compile and distribute such code units in
 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

.
 Hence, we need a mean to organize tests related to this 
\begin_inset Quotes eld
\end_inset

unit
\begin_inset Quotes erd
\end_inset

 conveniently.
\end_layout

\begin_layout Standard
Since a package can contain several functions, data frames, or other objects,
 our unit should collect together individual test functions related to each
 of these objects that compose our package.
 Also, the test unit should accommodate the well-define organization of
 a package, and should integrate in the already existing testing features
 of 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

, in particular, 
\begin_inset Flex CharStyle:Command
status collapsed

\begin_layout Plain Layout
R CMD check
\end_layout

\end_inset

.
 In both 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

, and 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

, one can define such test units, and they are made code compatible between
 the two implementations.
\end_layout

\begin_layout Standard
A test unit is a source-able text file that contains one or more test functions,
 plus possibly 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
.setUp()
\end_layout

\end_inset

 and 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
.tearDown()
\end_layout

\end_inset

 functions (see the online help for further information on these special
 functions).
 In 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

, you must write such test unit files from scratch.
 With 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

, you can 
\begin_inset Quotes eld
\end_inset

promote
\begin_inset Quotes erd
\end_inset

 one or several test functions (associated to other objects, or 
\begin_inset Quotes eld
\end_inset

living
\begin_inset Quotes erd
\end_inset

 alone as separate 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
svTest
\end_layout

\end_inset

 objects) by using 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
makeUnit()
\end_layout

\end_inset

.
 Here is how you promote the test associated with our 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
Square()
\end_layout

\end_inset

 function to a simple test unit containing only one test function:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<eval = FALSE>>=
\end_layout

\begin_layout Plain Layout

# Create a test unit on disk and view its content
\end_layout

\begin_layout Plain Layout

unit <- makeUnit(Square)
\end_layout

\begin_layout Plain Layout

file.show(unit, delete.file = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You got the following file whose name must start with 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
runit
\end_layout

\end_inset

, with an 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
.R
\end_layout

\end_inset

 extension (
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
runit*.R
\end_layout

\end_inset

), and located by default in the temporary directory of 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

.
 Specify another directory with the 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
dir =
\end_layout

\end_inset

 argument of
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
 makeUnit()
\end_layout

\end_inset

 for a more permanent record of this test unit file.
 Note also that 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
.setUp()
\end_layout

\end_inset

 and 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
.tearDown()
\end_layout

\end_inset

 functions are constructed automatically for you.
 They specify the context of these tests.
 This context is used, for instance, by the GUI in Komodo Edit/IDE to locate
 the test function and the code being tested.
\end_layout

\begin_layout LyX-Code
## Test unit 'Square'
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
.setUp <-
\end_layout

\begin_layout LyX-Code
function () {
\end_layout

\begin_layout LyX-Code
    ## Specific actions for svUnit: prepare context
\end_layout

\begin_layout LyX-Code
    if ("package:svUnit" %in% search()) {
\end_layout

\begin_layout LyX-Code
        .Log <- Log() ## Make sure .Log is created
\end_layout

\begin_layout LyX-Code
        .Log$..Unit <- "/tmp/RtmpBoZnId/runitSquare.R"
\end_layout

\begin_layout LyX-Code
        .Log$..File <- ""
\end_layout

\begin_layout LyX-Code
        .Log$..Obj <- ""
\end_layout

\begin_layout LyX-Code
        .Log$..Tag <- ""
\end_layout

\begin_layout LyX-Code
        .Log$..Msg <- ""
\end_layout

\begin_layout LyX-Code
        rm(..Test, envir = .Log)
\end_layout

\begin_layout LyX-Code
    }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
.tearDown <-
\end_layout

\begin_layout LyX-Code
function () {
\end_layout

\begin_layout LyX-Code
    ## Specific actions for svUnit: clean up context
\end_layout

\begin_layout LyX-Code
    if ("package:svUnit" %in% search()) {
\end_layout

\begin_layout LyX-Code
        .Log$..Unit <- ""
\end_layout

\begin_layout LyX-Code
        .Log$..File <- ""
\end_layout

\begin_layout LyX-Code
        .Log$..Obj <- ""
\end_layout

\begin_layout LyX-Code
        .Log$..Tag <- ""
\end_layout

\begin_layout LyX-Code
        .Log$..Msg <- ""
\end_layout

\begin_layout LyX-Code
        rm(..Test, envir = .Log)
\end_layout

\begin_layout LyX-Code
    }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
"testSquare" <-
\end_layout

\begin_layout LyX-Code
function() {
\end_layout

\begin_layout LyX-Code
    checkEqualsNumeric(9, Square(3))
\end_layout

\begin_layout LyX-Code
    checkEqualsNumeric(c(1, 4, 9), Square(1:3))
\end_layout

\begin_layout LyX-Code
    checkException(Square("xx"))
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
Compatibility of these test unit files between 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

 and 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 was a major concern in the design of 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

.
 Consequently, code specific to 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 (for managing the context of the tests) is embedded in a 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
if (
\begin_inset Quotes eld
\end_inset

package:svUnit
\begin_inset Quotes erd
\end_inset

 %in% search())
\end_layout

\end_inset

 construct.
 That way, if 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 is not loaded in memory, this code is not executed.
 
\emph on
Note that you should avoid loading in memory both 
\emph default

\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset


\emph on
 and 
\emph default

\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset


\emph on
 at the same time! If you do so, you will most likely crash your tests.
\end_layout

\begin_layout Standard
You will see further that it is possible to write much more complex test
 units with the same 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
makeUnit()
\end_layout

\end_inset

 function.
 But for the moment, letâ€™s discuss a little bit how such test units should
 be organized in 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 package.
\end_layout

\begin_layout Standard
If you intend to associate test units to your 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 package, you should respect the following conventions:
\end_layout

\begin_layout Itemize
Name your test units 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
runit*.R
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Place them in the 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
/inst/unitTests
\end_layout

\end_inset

 subdirectory of the package sources, or in one of its subdirectories.
 If you place them in a subdirectory of 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
/inst/unitTests
\end_layout

\end_inset

, then you define secondary unit tests for (optional) detailed testing of
 specific item in your package.
 Always keep in mind that all 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
runit*.R
\end_layout

\end_inset

 files in a directory will be run one after the other.
 So, if you want to make subgroups you would like to dissociate them, and
 locate them is separate subdirectories.
\end_layout

\begin_layout Itemize
When the package will be compiled, all these test units will be located
 in 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
/unitTests
\end_layout

\end_inset

 in the compiled/installed version of your 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 package.
\end_layout

\begin_layout Standard
If you respect these conventions, 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 knows where package unit tests are located and will be able to find and
 run them quite easily.
 See, for instance, the examples in the 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 package.
\end_layout

\begin_layout Standard
So, with test units associated to packages, you have a very convenient way
 to run these tests, including from the Komodo GUI.
 With just a little bit more coding you can also include these test units
 in the 
\begin_inset Flex CharStyle:Command
status collapsed

\begin_layout Plain Layout
R CMD check
\end_layout

\end_inset

 process of your packages.
 You do this by means of examples in a help page (we prefer to use 
\series bold
examples
\series default
, instead of 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
/tests
\end_layout

\end_inset

 in the 
\begin_inset Flex CharStyle:Command
status collapsed

\begin_layout Plain Layout
R CMD check
\end_layout

\end_inset

 process, because examples offer a more flexible way to run tests and you
 can also run them in interactive sessions through the 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
example()
\end_layout

\end_inset

 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 function, which is not the case for code located in the 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
/tests
\end_layout

\end_inset

 subdirectory of your package).
 Here is what you do to associate some or all of your unit tests to the
 
\begin_inset Flex CharStyle:Command
status collapsed

\begin_layout Plain Layout
R CMD check
\end_layout

\end_inset

 process (illustrated with the case of the 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 package itself):
\end_layout

\begin_layout Itemize
Define a 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
.Rd
\end_layout

\end_inset

 help file in the 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
/man
\end_layout

\end_inset

 subdirectory called 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
unitTests.<mypackage>.Rd
\end_layout

\end_inset

 where <mypackage> is the name of your package (or whatever name you prefer).
\end_layout

\begin_layout Itemize
Fill the 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
.Rd
\end_layout

\end_inset

 file, making sure that you define an alias as 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
unitTests.<mypackage>
\end_layout

\end_inset

.
 Also place a little bit of information telling how users can run your test
 in an interactive session.
\end_layout

\begin_layout Itemize
The important part of this file is, of course, the 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout

\backslash
examples{}
\end_layout

\end_inset

 section.
 You must first clear the log, then run each test, and then, call the 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
errorLog()
\end_layout

\end_inset

 function.
 That function looks if one or more tests failed or raised an error.
 In this case, it stops execution of the example and causes a dump of the
 test log in the 
\begin_inset Flex CharStyle:Command
status collapsed

\begin_layout Plain Layout
R CMD check
\end_layout

\end_inset

 process.
 That way, providing that you have the 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 package installed in the machine where you run 
\begin_inset Flex CharStyle:Command
status collapsed

\begin_layout Plain Layout
R CMD check
\end_layout

\end_inset

, your test units will be included nicely in the checking process of your
 packages, that is, they will run silently each time you check your package
 if no error occurs, but will produce a detailed report in case of problems.
\end_layout

\begin_layout Itemize
Here is how your 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
.Rd
\end_layout

\end_inset

 file should looks like (example of the 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 package):
\end_layout

\begin_layout LyX-Code

\backslash
name{unitTests.svUnit}
\end_layout

\begin_layout LyX-Code

\backslash
alias{unitTests.svUnit}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\backslash
title{ Unit tests for the package svUnit }
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\backslash
description{ Performs unit tests defined in this
\end_layout

\begin_layout LyX-Code
  package by running 
\backslash
code{example(unitTests.svUnit)}.
\end_layout

\begin_layout LyX-Code
  Tests are in 
\backslash
code{runit*.R} files Located in the
\end_layout

\begin_layout LyX-Code
  '/unitTests' subdirectory or one of its
\end_layout

\begin_layout LyX-Code
  subdirectories ('/inst/unitTests' and subdirectories
\end_layout

\begin_layout LyX-Code
  in package sources).
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\backslash
author{Philippe Grosjean
\end_layout

\begin_layout LyX-Code
  (
\backslash
email{phgrosjean@sciviews.org})} 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\backslash
examples{
\end_layout

\begin_layout LyX-Code
if (require(svUnit)) { 
\end_layout

\begin_layout LyX-Code
    clearLog()
\end_layout

\begin_layout LyX-Code
    runTest(svSuite("package:svUnit"), "svUnit")
\end_layout

\begin_layout LyX-Code
    ## Possibly run other tests here...
\end_layout

\begin_layout LyX-Code
    errorLog()
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\backslash
keyword{utilities} 
\end_layout

\begin_layout Standard
Note, however, that if the package 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 is not available on the computer where you run 
\begin_inset Flex CharStyle:Command
status collapsed

\begin_layout Plain Layout
R CMD check
\end_layout

\end_inset

, your tests are silently ignored (
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
require()
\end_layout

\end_inset

 issues a warning, but that does not prevent the checking process to continue).
 This is an intended feature in order to allow compilation of your package
 without requiring 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

.
 Hence, dependence to 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 is less strict and also allows you to check your tests using 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
RUnit
\end_layout

\end_inset

 (but you have to write a dedicated function for that).
 Still to keep such a less strict dependence on 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

, you should add 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 in the 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
Suggests:
\end_layout

\end_inset

 field in the 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
DESCRIPTION
\end_layout

\end_inset

 file of your package, not in 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
Depends:
\end_layout

\end_inset

 or 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
Imports:
\end_layout

\end_inset

 fields (except if you use 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 for other purposes that testing your package using the mechanism discussed
 here, of course.
\end_layout

\begin_layout Standard
Also, this approach, associated with examples, provides a very convenient
 and easy way to test a package from the command line in an interactive
 session by running:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

example(unitTests.svUnit)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the present case, the 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
errorLog()
\end_layout

\end_inset

 instruction in the examples returns nothing, because all tests succeed.
 If there is an error somewhere, you will see it printed at the end of this
 example.
\end_layout

\begin_layout Subsection
Test suites: collections of test functions and units
\end_layout

\begin_layout Standard
The highest level of organization of your tests is the 
\series bold
test suite
\series default
.
 A test suite is an unordered collection of test functions and test units.
 You can select test units associated with 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 package in a very convenient way: just specify 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
package:myPkg
\end_layout

\end_inset

 and all test units in the 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
/unitTests
\end_layout

\end_inset

 subdirectory of the package 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
myPkg
\end_layout

\end_inset

 will be included (
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 does all the required work to map these to actual directories where the
 test unit files are located).
 Also, if you specify 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
package:myPkg (subgroup)
\end_layout

\end_inset

, you will include the test units defined in 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
/unitTests/subgroup
\end_layout

\end_inset

 in the package 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
myPkg
\end_layout

\end_inset

.
 Of course, you will be able to also add test units defined in custom directorie
s, outside of 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 packages (for instance for integration of 
\emph on
harness tests
\emph default
 that check cross-packages, or multi-packages features of your application).
\end_layout

\begin_layout Standard
Test functions associated to your test suite receive a special treatment.
 Unlike 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
runTest()
\end_layout

\end_inset

 applied to a single test function, or to an object that has an associated
 test function, these tests are not run from the version loaded in memory.
 Instead, they are first collected together in a test unit file on disk
 (located in the 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 temporary directory, by default), and run from there.
 Hence, building a more complex test unit file by collecting together several
 test functions is just a question of constructing a test suite, and then,
 applying the 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
makeUnit()
\end_layout

\end_inset

 function to this 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
svSuite
\end_layout

\end_inset

 object.
\end_layout

\begin_layout Standard
Before we apply all this, you should also know the existence of one more
 function: 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
svSuiteList()
\end_layout

\end_inset

.
 This function lists all test units and test functions available in your
 system at a given time.
 So, you donâ€™t need to manually create lists of components.
 You are better to list them automatically.
 Of course, this function has a lot of arguments for listing only test units
 in packages, only test functions, specifying where (in which environment)
 the test functions are located, adding custom directories where to look
 for test units, etc, etc.
 See the online help of this function for the description of all these arguments.
 One argument is particularly important: 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
excludeList =
\end_layout

\end_inset

.
 This argument defines one or several regular expressions that are used
 as filters to hide items from the list.
 This is required, since you will certainly not want to run again and again,
 letâ€™s say, the example tests associated with the 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 package (
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 must be loaded in memory to run the tests, so its tests examples will always
 be listed by 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
svSuiteList()
\end_layout

\end_inset

, ...
 unless you define an adequate filter expression that will exclude them
 from your list)! As the default argument suggests it, the regular expression
 for list exclusion could also be recorded in 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
options(svUnit.excludeList = ...)
\end_layout

\end_inset

.
 Here is how it works:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

## Reset default exclusion list
\end_layout

\begin_layout Plain Layout

options(svUnit.excludeList = c("package:sv", "package:RUnit"))
\end_layout

\begin_layout Plain Layout

## List all currently available tests 
\end_layout

\begin_layout Plain Layout

svSuiteList()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Thus, every entry matching the regular expressions 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
package:sv
\end_layout

\end_inset

 and 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
package:RUnit
\end_layout

\end_inset

 are excluded from the list.
 The entries 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
package:svUnit
\end_layout

\end_inset

 and 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
package:svUnit (VirtualClass
\end_layout

\end_inset

 match first pattern and are thus excluded.
 Now, let's clear the exclusion list to see what happens:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

## Clear exclusion list
\end_layout

\begin_layout Plain Layout

options(svUnit.excludeList = NULL)
\end_layout

\begin_layout Plain Layout

svSuiteList()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The test units associated with the package 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 are now listed.
 You have noticed that 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
svSuiteList()
\end_layout

\end_inset

 can also find automatically 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
svTest
\end_layout

\end_inset

 objects, as well as tests attached to objects in the user's workspace.
 You can create a suite by collecting all these items together very easily:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

(mySuite <- svSuiteList())
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now letâ€™s make a test unit using tests collected in this suite:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<eval = FALSE>>=
\end_layout

\begin_layout Plain Layout

myUnit <- makeUnit(mySuite, name = "ExampleTests")
\end_layout

\begin_layout Plain Layout

file.show(myUnit, delete.file = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This produces a file named 
\begin_inset Flex CharStyle:File
status collapsed

\begin_layout Plain Layout
runitExampleTests.R
\end_layout

\end_inset

 located (by default) in the 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 temporary directory, and which collects together all tests in the user's
 workspace (either as 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
svTest
\end_layout

\end_inset

 objects, or as tests attached to other objects), plus tests suites in packages
 that are 
\series bold
not
\series default
 in the exclusion list.
 Running all tests in your suite is very simple.
 You still use 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
runTest()
\end_layout

\end_inset

 as usual, but this time, you apply it to your 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
svSuite
\end_layout

\end_inset

 object:
\end_layout

\begin_layout R-Chunk
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

clearLog()
\end_layout

\begin_layout Plain Layout

runTest(mySuite)
\end_layout

\begin_layout Plain Layout

summary(Log())
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are many other tools to manipulate 
\begin_inset Flex CharStyle:Class
status collapsed

\begin_layout Plain Layout
svSuite
\end_layout

\end_inset

 objects in the 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 package, including functions to define the content of the suite manually
 (see online help).
\end_layout

\begin_layout Section
Using svUnit with SciViews Komodo
\end_layout

\begin_layout Standard
If you use the SciViews Komodo GUI (see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.sciviews.org/SciViews-K
\end_layout

\end_inset

), you can integrate 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 tests in this IDE and display reports in a convenient hierarchical tree
 presentation (Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:KomodoRUnit"

\end_inset

).
 If 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 is started from within Komodo Edit or IDE (with the 
\begin_inset Flex SciViews
status open

\begin_layout Plain Layout
-K
\end_layout

\end_inset

 and 
\begin_inset Flex SciViews
status open

\begin_layout Plain Layout
-K Unit
\end_layout

\end_inset

 plugins installed), then, loading the 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 package in 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 automatically installs the 
\series bold
R Unit
\series default
 side panel in Komodo at right.
 Its use should be straightforward:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout R-Center

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename svUnit_KomodoRUnit.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:KomodoRUnit"

\end_inset

Komodo Edit with 
\begin_inset Flex SciViews
status open

\begin_layout Plain Layout
-K
\end_layout

\end_inset

 and 
\begin_inset Flex SciViews
status open

\begin_layout Plain Layout
-K Unit
\end_layout

\end_inset

 after running tests.
 At right: the 
\series bold
R Unit
\series default
 panel that display (at the top) the list of available tests, and test units
 where you can select the ones to run, and at the bottom, a tree with the
 results from last tests run.
 The stripe at the very top is green if all tests succeed, and red (as here),
 if at least one tests failed or raised an error.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Select the tests you want to run in the top part,
\end_layout

\begin_layout Itemize
Click the 
\begin_inset Flex CharStyle:Widget
status collapsed

\begin_layout Plain Layout
Run
\end_layout

\end_inset

 button each time you want to refresh the test tree,
\end_layout

\begin_layout Itemize
Browse the tree for failures or errors (the color at the top of the panel
 immediately indicates if there is a problem somewhere: green -> everything
 is fine, red -> there is a problem).
\end_layout

\begin_layout Itemize
If you have failures or errors, move the mouse on top of the corresponding
 item in the tree, and you got more information displayed in a tooltip,
\end_layout

\begin_layout Itemize
Click on an item to open the test unit at that place in a buffer in Komodo.
\end_layout

\begin_layout Standard
The 
\begin_inset Flex CharStyle:Widget
status collapsed

\begin_layout Plain Layout
Auto
\end_layout

\end_inset

 mode, when activated, sources 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 files currently edited in Komodo whenever you save them, and then, refreshes
 the test report tree.
 This mode allows you to run automatically your tests in the background
 while you edit your 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 code!
\end_layout

\begin_layout Standard
\begin_inset Box Framed
position "t"
hor_pos "c"
has_inner_box 0
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
If you want to implement such a side panel in another GUI, make sure to
 look at the 
\begin_inset Flex CharStyle:Code
status collapsed

\begin_layout Plain Layout
koUnit_XXX()
\end_layout

\end_inset

 functions in the 
\begin_inset Flex CharStyle:Pkg
status collapsed

\begin_layout Plain Layout
svUnit
\end_layout

\end_inset

 package.
 These functions allow to control the GUI in Komodo remotely from within
 
\begin_inset Flex R
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

, and similar functions should not be too difficult to implement for other
 GUIs.
 
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Grosjean"

\end_inset

Grosjean, Ph., 2003.
 SciViews: an object-oriented abstraction layer to design GUIs on top of
 various calculation kernels [online: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.ci.tuwien.ac.at/Conferences/DSC-2003
\end_layout

\end_inset

]
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "IEEE"

\end_inset

IEEE Standards Boards, 1993.
 IEEE standard for software unit testing.
 ANSI/IEEE Std 1008-1987.
 24 pp.
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Ihaka"

\end_inset

Ihaka R.
 & R.
 Gentleman, 1996.
 R: a language for data analysis and graphics.
 
\emph on
J.
 Comput.
 Graphic.
 Stat.
\emph default
, 
\series bold
5
\series default
:299-314.
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Jeffries"

\end_inset

Jeffries, R., 2006.
 Extreme programming, web site at: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.xprogramming.com
\end_layout

\end_inset

.
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Konig"

\end_inset

KÃ¶nig, T., K.
 JÃ¼nemann & M.
 Burger, 2007.
 RUnit â€“ A unit test framework for R.
 Vignette of the package RUnit available on CRAN.
 11 pp.
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Rcore"

\end_inset

R Development Core Team, 2008.
 R: A language and environment for statistical computing.
 [online: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.R-project.org
\end_layout

\end_inset

].
\end_layout

\end_body
\end_document
